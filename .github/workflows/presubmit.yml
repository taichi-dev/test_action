name: Presubmit Checks
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix_osx: ${{ steps.set-matrix.outputs.matrix_osx }}
    steps:
      - id: set-matrix
        run: |
          # For nightly release, we only run on python 3.8
          [ -z "${{ github.event.action }}" ] && matrix="[{\"name\":\"taichi-nightly\",\"python\":\"3.8\"}]"
          # For production release, we run on four python versions.
          [ -z "${{ github.event.action }}" ] || matrix="[{\"name\":\"taichi\",\"python\":\"3.6\"},{\"name\":\"taichi\",\"python\":\"3.7\"},{\"name\":\"taichi\",\"python\":\"3.8\"},{\"name\":\"taichi\",\"python\":\"3.9\"}]"
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}\"
          # M1 only supports py38 and py39(conda), so change matrix.
          [ -z "${{ github.event.action }}" ] && matrix_osx="[{\"name\":\"taichi-nightly\",\"python\":\"3.8\"}]"
          [ -z "${{ github.event.action }}" ] || matrix_osx="[{\"name\":\"taichi\",\"python\":\"3.8\"},{\"name\":\"taichi\",\"python\":\"3.9\"}]"
          echo ::set-output name=matrix_osx::{\"include\":$(echo $matrix_osx)}\"
  build_and_upload_linux:
    name: Build and Upload (linux only)
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    runs-on: [self-hosted, cuda, vulkan, cn, release]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Create Python Wheel
        run: |
          # We hacked here because conda activate in CI won't update python PATH
          # automatically. So we don't activate and use desired python version
          # directly.
          export PATH=/home/buildbot/miniconda3/envs/$PYTHON/bin:$PATH
          TAICHI_REPO_DIR=`pwd`
          export PATH=$LLVM_LIB_ROOT_DIR/bin:/usr/local/cuda/bin:$PATH
          export LLVM_DIR=$LLVM_LIB_ROOT_DIR/lib/cmake/llvm
          export CXX=clang++-8
          python3 -m pip uninstall taichi taichi-nightly -y
          python3 -m pip install -r requirements_dev.txt
          python3 -m pip install twine
          cd python
          git fetch origin master
          export TAICHI_CMAKE_ARGS=$CI_SETUP_CMAKE_ARGS
          python3 build.py build --project_name $PROJECT_NAME
          cd ..
          NUM_WHL=`ls dist/*.whl | wc -l`
          if [ $NUM_WHL -ne 1 ]; then echo 'ERROR: created more than 1 whl.' && exit 1; fi
          python3 -m pip install dist/*.whl
        env:
          LLVM_LIB_ROOT_DIR: /opt/taichi-llvm-10.0.0
          BUILD_NUM_THREADS: 8
          CI_SETUP_CMAKE_ARGS: -DTI_WITH_VULKAN:BOOL=ON -DTI_WITH_OPENGL:BOOL=ON -DTI_WITH_CC:BOOL=OFF -DTI_BUILD_TESTS:BOOL=${{ matrix.with_cpp_tests }}
          PROJECT_NAME: ${{ matrix.name }}
          PYTHON: ${{ matrix.python }}

      - name: Archive Wheel Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-py${{ matrix.python }}-linux.whl
          path: dist/*.whl

      - name: Test
        run: |
          export PATH=/home/buildbot/miniconda3/envs/$PYTHON/bin:$PATH
          python3 examples/algorithm/laplace.py
          export DISPLAY=:1
          hash -r
          glewinfo
          ti diagnose
          ti changelog
          ti test -vr2 -t2 -k "not ndarray and not torch"
          # ndarray test might OOM if run with -t2.
          # FIXME: unify this with presubmit.yml to avoid further divergence
          ti test -vr2 -t1 -k "ndarray or torch"
        env:
          PYTHON: ${{ matrix.python }}

      - name: Upload PyPI
        env:
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
          PROD_PWD: ${{ secrets.PYPI_PWD_PROD }}
          NIGHT_PWD: ${{ secrets.PYPI_PWD_NIGHTLY }}
          PROJECT_NAME: ${{ matrix.name }}
          PYTHON: ${{ matrix.python }}
        run: |
          export PATH=/home/buildbot/miniconda3/envs/$PYTHON/bin:$PATH
          cd python
          if [ $PROJECT_NAME == "taichi-nightly" ]; then export PYPI_PWD="$NIGHT_PWD" && python3 build.py upload --skip_build --testpypi --project_name $PROJECT_NAME
          elif [ $PROJECT_NAME == "taichi" ]; then export PYPI_PWD="$PROD_PWD" && python3 build.py upload --skip_build; fi

